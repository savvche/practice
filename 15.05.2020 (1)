class Hero:
    def __init__(self):
        self.positive_effects = []
        self.negative_effects = []
        self.stats = {
            "HP": 100,   #я сначала неправильно поняла задание и сделала свои статы, баффы и дебаффы
            "SP": 20,
            "Vision": 10,
            "Speed": 10,
            "Jump": 10,
            "Speech": 10,
            "Strength": 10,
            "Intelligence": 10
        }

    def get_positive_effects(self):
        return self.positive_effects.copy()

    def get_negative_effects(self):
        return self.negative_effects.copy()

    def get_stats(self):
        return self.stats.copy()

from abc import ABC, abstractmethod

class AbstractEffect(Hero, ABC):
    def __init__(self, base):
        self.base = base

    @abstractmethod
    def get_positive_effects(self):
        return self.positive_effects

    @abstractmethod
    def get_negative_effects(self):
        return self.negative_effects

    @abstractmethod
    def get_stats(self):
        pass




class AbstractPositive(AbstractEffect):
    def get_negative_effects(self):
        return self.base.get_negative_effects()


class AbstractNegative(AbstractEffect):
    def get_positive_effects(self):
        return self.base.get_positive_effects()


class LionRage(AbstractPositive):
    def get_stats(self):
        stats = self.base.get_stats()
        stats["Speed"] += 3
        stats["Intelligence"] -= 1
        stats["Strength"] +=5
        stats["Jump"] +=3
        return stats

    def get_positive_effects(self):
        return self.base.get_positive_effects() + ["LionRage"]


class AmuletOfWisdom(AbstractPositive):
    def get_stats(self):
        stats = self.base.get_stats()
        stats["SP"] +=5
        stats["Speech"] += 5
        stats["Intelligence"] += 5
        stats["Vision"] +=2
        return stats

    def get_positive_effects(self):
        return self.base.get_positive_effects() + ["AmuletOfWisdom"]


class Freeze(AbstractNegative):
    def get_stats(self):
        stats = self.base.get_stats()
        stats["Strength"] -= 5
        stats["Speed"] -= 7
        stats["Jump"] -= 7
        stats["Speech"] -= 3
        return stats

    def get_negative_effects(self):
        return self.base.get_negative_effects() + ["Freeze"]


class Blindness(AbstractNegative):
    def get_stats(self):
        stats = self.base.get_stats()
        stats["Vision"] -=10
        stats["Intelligence"] +=2
        return stats

    def get_negative_effects(self):
        return self.base.get_negative_effects() + ["Curse"]


class Poisoning(AbstractNegative):
    def get_stats(self):
        stats = self.base.get_stats()
        stats["HP"] -=25
        stats["Strength"] -=4
        stats["Speed"] -=2
        stats["Jump"] -=2
        stats["Vision"] -=2
        stats["Speech"] -=2
    def get_negative_effects(self):
        return self.base.get_negative_effects() + ["Poisoning"]

Mel = Hero()
print(Mel.stats)
print(Mel.get_negative_effects())

Strong = LionRage(Mel)
Cold = Freeze(Mel)

print(Cold.get_stats())
print(Cold.get_negative_effects())

print(Strong.get_stats())
print(Strong.get_positive_effects())
